//////////////////////////////
Stack Array Implementation Log
//////////////////////////////

//Using the test6 program and code displays the menu

	Entering in H displays the menu list
	Commands:
	  H  : Help (displays this message)
	  +x : Push x
	  -  : Pop
	  C  : Clear
	  E  : Empty stack?
	  F  : Full stack?
	  Q  : Quit the test program

	Empty stack.

//Pushing onto the Stack adds a value to the stack with the +(digit)

	Command: +1
	Push 1
	Top = 0
	0	1	2	3	4	5	6	7	
	[1]	


	Command: +2
	Push 2
	Top = 1
	0	1	2	3	4	5	6	7	
	1	[2]	


	Command: +3
	Push 3
	Top = 2
	0	1	2	3	4	5	6	7	
	1	2	[3]

//When Stack is full, error message is displayed

	Command: +4
	Push 4
	Error: Stack is full, Cannot Push onto Stack.
	Top = 7
	0	1	2	3	4	5	6	7	
	1	2	3	6	7	3	2	[1]	

//Popping the stack removes the top data value by typing -

	Command: -
	Popped 1
	Top = 6
	0	1	2	3	4	5	6	7	
	1	2	3	6	7	3	[2]	

//Clearing the Stack removes all values in the stack by typing c

	Command: c
	Clear the stack
	Empty stack.

//Checks if Empty by typing E, checks Stack for having no data values

	Command: e
	Stack is empty
	Empty stack.

	Command: e
	Stack is NOT empty
	Top = 0
	0	1	2	3	4	5	6	7	
	[1]

//Checks if full by typing F, checks Stack for being at max capacity
	
	Command: f
	Stack is NOT full
	Empty stack.

	Command: f
	Stack is NOT full
	Top = 0
	0	1	2	3	4	5	6	7	
	[1]	

	Command: f
	Stack is full
	Top = 7
	0	1	2	3	4	5	6	7	
	1	2	5	4	2	7	9	[3]

//Entering Q exits the program


////////////////////////////////
Stack Linked Implementation Log
/////////////////////////////////

//Using the test6 program and code displays the menu

//Entering in H displays the menu list

	Commands:
	  H  : Help (displays this message)
	  +x : Push x
	  -  : Pop
	  C  : Clear
	  E  : Empty stack?
	  F  : Full stack?
	  Q  : Quit the test program

	Empty stack.

//Pushing onto stack with +(digit), shows top of stack and bottom of stack

	Command: +1
	Push 1
	Top	[1]	Bottom

	Command: +2
	Push 2
	Top	[2]	1	Bottom

//Popping from stack by entering -, deletes the top node and sets the one under it as new top node

	Command: - 
	Popped 2
	Top	[1]	Bottom

//Clearing by entering c removes every node in the stack, making it empty

	Command: c
	Clear the stack
	Empty stack

//Checking empty stack by entering e, checks if there is node in stack

	Command: e
	Stack is empty
	Empty stack

	Command: e
	Stack is NOT empty
	Top	[1]	Bottom

//Checks if stack is full by entering f, being full is not possible with linked list implementation

	Command: f
	Stack is NOT full
	Top	[1]	Bottom

	Command: f
	Stack is NOT full
	Empty stack

//Entering Q exits the program



/////////////////////////////////
Postfix Evaluation Implementation
/////////////////////////////////

//The program has a menu with an option for test cases, an option for inputted postfix evaluation, and exiting the program

	MENU
	1. Test Cases
	2. Postfix Calculation
	3. Exit

//There are 5 test cases with infix and postfix notation, properly evaluated

	TEST CASES
	1. 1+2+(3*4) = 1 2 + 3 4 * + = 15
	2. 2^(2^(2^2)) = 2 2 2 2 ^ ^ ^ = 65536
	3. 4+7+(9*(4/2)) = 4 7 + 9 4 * 2 / + = 29
	4. (3^2)+(8/4)-6 = 3 2 ^ 8 4 / + 6 - = 5
	5. 9-6+(((1*3)*2)/4) = 9 6 - 1 3 * 2 * 4 / + = 4.5

//The second option allows the user to input their own VALID postfix expression to be evaluated
//(3+4) * 5/2 = 3 4 + 5 2 / * = 17.5

	Input postfix equation
	3 4 + 5 2 / *
	Evaluated: 17.5

//Entering option 3 exits the program




///////////////////////////////////
Delimiters Ok Implementation
///////////////////////////////////

//The program has a menu with an option for test cases, an option for checking inputted string for proper delimiter usage , and exiting the program

	MENU
	1. Test Cases
	2. Check Delimited Expression
	3. Exit

//The first option outputs 5 test cases.It prints out the delimited expression and outputs a message saying whether the expression is valid or invalid.
//The ones that output valid have properly matching delimiters while the invalid ones do not have matching delimiters

	TEST CASES
	1. [3*({1+2})]{6+2} Valid
	2. a=(f(b)-(c+2)/2 Invalid
	3. a=(f(b)-(c+2)/2) Valid
	4. }}}}}{} Invalid
	5. []] Invalid

//The second option allows the user to input their own delimited expression for evaluation
//It outputs valid or invalid based on how the delimiters are used

	Input delimited expression
	({)}
	Invalid

	Input delimited expression
	c = 1 + (2 * 3) - {10/5} [3-5]
	Valid

//The third option exits the program



